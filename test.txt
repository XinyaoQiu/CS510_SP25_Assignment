    '[\n  {\n    "version": "python3",\n    "target code": "def solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        \\n        l, r = 0, 2 * 10**9\\n        block_idx = -1\\n        while l <= r:\\n            mid = (l + r) // 2\\n            block_len = 0\\n            x = mid\\n            p = 1\\n            while x > 0:\\n                block_len += (x - 10**(p-1) + 1) * p\\n                x //= 10\\n                p += 1\\n            block_len = mid * (mid + 1) // 2\\n            block_len_str = 0\\n            for i in range(1, mid + 1):\\n              block_len_str += len(str(i))\\n            if block_len_str < k:\\n                l = mid + 1\\n            else:\\n                block_idx = mid\\n                r = mid - 1\\n        \\n        block_len = 0\\n        x = block_idx\\n        p = 1\\n        while x > 0:\\n            block_len += (x - 10**(p-1) + 1) * p\\n            x //= 10\\n            p += 1\\n        block_len = block_idx * (block_idx + 1) // 2\\n        block_len_str = 0\\n        for i in range(1, block_idx + 1):\\n          block_len_str += len(str(i))\\n        \\n        k -= block_len_str\\n        \\n        l, r = 0, block_idx + 1\\n        num_idx = -1\\n        while l <= r:\\n            mid = (l + r) // 2\\n            num_len = 0\\n            for i in range(1, mid + 1):\\n                num_len += len(str(i))\\n            if num_len < k:\\n                l = mid + 1\\n            else:\\n                num_idx = mid\\n                r = mid - 1\\n        \\n        num_len = 0\\n        for i in range(1, num_idx + 1):\\n            num_len += len(str(i))\\n        \\n        k -= num_len\\n        \n        target_num = str(num_idx)\\n        print(target_num[k-1])\\n\\nsolve()"\n  }\n]'
    '[\\n  {\\n    "version": "python3",\\n    "target code": "def solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        \\n        l, r = 0, 2 * 10**9\\n        block_idx = -1\\n        while l <= r:\\n            mid = (l + r) // 2\\n            block_len = 0\\n            x = mid\\n            p = 1\\n            while x > 0:\\n                block_len += (x - 10**(p-1) + 1) * p\\n                x //= 10\\n                p += 1\\n            block_len = mid * (mid + 1) // 2\\n            block_len_str = 0\\n            for i in range(1, mid + 1):\\n              block_len_str += len(str(i))\\n            if block_len_str < k:\\n                l = mid + 1\\n            else:\\n                block_idx = mid\\n                r = mid - 1\\n        \\n        block_len = 0\\n        x = block_idx\\n        p = 1\\n        while x > 0:\\n            block_len += (x - 10**(p-1) + 1) * p\\n            x //= 10\\n            p += 1\\n        block_len = block_idx * (block_idx + 1) // 2\\n        block_len_str = 0\\n        for i in range(1, block_idx + 1):\\n          block_len_str += len(str(i))\\n        \\n        k -= block_len_str\\n        \\n        l, r = 0, block_idx + 1\\n        num_idx = -1\\n        while l <= r:\\n            mid = (l + r) // 2\\n            num_len = 0\\n            for i in range(1, mid + 1):\\n                num_len += len(str(i))\\n            if num_len < k:\\n                l = mid + 1\\n            else:\\n                num_idx = mid\\n                r = mid - 1\\n        \\n        num_len = 0\\n        for i in range(1, num_idx + 1):\\n            num_len += len(str(i))\\n        \\n        k -= num_len\\n        \\n        target_num = str(num_idx)\\n        print(target_num[k-1])\\n\\nsolve()"\\n  }\\n]'